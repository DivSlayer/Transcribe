name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-dev build-essential
        sudo apt-get install -y portaudio19-dev python3-pyaudio
    
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip
        pip --version
    
    - name: Install base requirements (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Installing requirements with retry logic..."
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          if pip install --no-cache-dir -r requirements.txt; then
            echo "Successfully installed requirements"
            break
          else
            echo "Attempt $attempt failed"
            if [ $attempt -eq $max_attempts ]; then
              echo "All attempts failed"
              exit 1
            fi
            echo "Retrying in 10 seconds..."
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        echo "Verifying installations..."
        pip list
    
    - name: Install base requirements (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Starting requirements installation..."
        
        # Function to install a single package with retry
        function Install-PackageWithRetry {
          param (
            [string]$packageName,
            [int]$maxAttempts = 3
          )
          
          $attempt = 1
          while ($attempt -le $maxAttempts) {
            Write-Host "Installing $packageName (Attempt $attempt of $maxAttempts)..."
            try {
              pip install --no-cache-dir $packageName
              Write-Host "Successfully installed $packageName"
              return $true
            }
            catch {
              Write-Host "Failed to install $packageName on attempt $attempt"
              if ($attempt -eq $maxAttempts) {
                Write-Host "All attempts failed for $packageName"
                return $false
              }
              Write-Host "Retrying in 5 seconds..."
              Start-Sleep -Seconds 5
              $attempt++
            }
          }
          return $false
        }
        
        # Read requirements file
        Write-Host "Reading requirements.txt..."
        $requirements = Get-Content requirements.txt
        
        # Install each package individually
        $failedPackages = @()
        foreach ($req in $requirements) {
          if ($req -and -not $req.StartsWith('#')) {
            if (-not (Install-PackageWithRetry $req)) {
              $failedPackages += $req
            }
          }
        }
        
        # Report results
        if ($failedPackages.Count -gt 0) {
          Write-Host "Failed to install the following packages:"
          $failedPackages | ForEach-Object { Write-Host "- $_" }
          exit 1
        }
        
        Write-Host "All packages installed successfully"
        Write-Host "Verifying installations..."
        pip list
    
    - name: Install PyInstaller
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Installing PyInstaller with retry logic..."
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          if pip install --no-cache-dir pyinstaller; then
            echo "Successfully installed PyInstaller"
            break
          else
            echo "Attempt $attempt failed"
            if [ $attempt -eq $max_attempts ]; then
              echo "All attempts failed"
              exit 1
            fi
            echo "Retrying in 5 seconds..."
            sleep 5
            attempt=$((attempt + 1))
          fi
        done
        
        echo "Verifying PyInstaller installation..."
        pyinstaller --version

    - name: Install PyInstaller
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Installing PyInstaller with retry logic..."
        $maxAttempts = 3
        $attempt = 1
        
        while ($attempt -le $maxAttempts) {
          Write-Host "Attempt $attempt of $maxAttempts"
          try {
            pip install --no-cache-dir pyinstaller
            Write-Host "Successfully installed PyInstaller"
            break
          }
          catch {
            Write-Host "Attempt $attempt failed"
            if ($attempt -eq $maxAttempts) {
              Write-Host "All attempts failed"
              exit 1
            }
            Write-Host "Retrying in 5 seconds..."
            Start-Sleep -Seconds 5
            $attempt++
          }
        }
        
        Write-Host "Verifying PyInstaller installation..."
        pyinstaller --version
    
    - name: Install additional dependencies
      run: |
        pip install numpy
        pip install PyAudio
    
    - name: Verify installations
      run: |
        echo "Installed Python packages:"
        pip list
    
    - name: Create directories
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p chunks output
        echo "Created directories:"
        ls -la
    
    - name: Create directories
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path chunks, output
        Write-Host "Created directories:"
        Get-ChildItem
    
    - name: Build executable
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "Starting PyInstaller build..."
        Write-Host "Current directory:"
        Get-Location
        Write-Host "Directory contents:"
        Get-ChildItem -Recurse
        
        # Install argcomplete first
        Write-Host "Installing argcomplete..."
        pip install argcomplete
        
        # Create spec file with error handling
        Write-Host "Creating spec file..."
        try {
          pyi-makespec --onefile --clean --noconfirm --add-data "chunks;chunks" --add-data "output;output" --hidden-import channels --hidden-import daphne --hidden-import django --hidden-import SpeechRecognition --hidden-import pydub --hidden-import ffmpeg --hidden-import ffmpeg-python --hidden-import aifc --hidden-import wave --hidden-import audioop --hidden-import array --hidden-import struct --hidden-import numpy --hidden-import pyaudio transcribe.py
          Write-Host "Spec file created successfully"
        }
        catch {
          Write-Host "Error creating spec file: $_"
          exit 1
        }
        
        # Build using spec file
        Write-Host "Building with spec file..."
        try {
          pyinstaller --clean --noconfirm transcribe.spec
          Write-Host "PyInstaller build completed"
        }
        catch {
          Write-Host "Error during PyInstaller build: $_"
          exit 1
        }
        
        Write-Host "Checking dist directory:"
        Get-ChildItem -Path dist
        
        if (Test-Path dist/Transcribe.exe) { 
          Write-Host "Renaming Transcribe.exe to transcribe.exe"
          mv dist/Transcribe.exe dist/transcribe.exe 
        }
    
    - name: Build executable
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Debug information
        echo "Python version:"
        python --version
        echo "Pip version:"
        pip --version
        echo "Installed packages:"
        pip list
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        
        # Create spec file first
        echo "Creating spec file..."
        pyi-makespec --onefile --clean --noconfirm --add-data "chunks:chunks" --add-data "output:output" --hidden-import channels --hidden-import daphne --hidden-import django --hidden-import SpeechRecognition --hidden-import pydub --hidden-import ffmpeg --hidden-import ffmpeg-python --hidden-import aifc --hidden-import wave --hidden-import audioop --hidden-import array --hidden-import struct --hidden-import numpy --hidden-import pyaudio gui.py
        
        # Build using spec file
        echo "Building with spec file..."
        pyinstaller --clean --noconfirm transcribe.spec
        
        echo "PyInstaller build completed"
        echo "Checking dist directory:"
        ls -la dist/
        
        # Check if build was successful
        if [ -f "dist/transcribe" ]; then
          chmod +x dist/transcribe
          echo "Build successful"
        else
          echo "Build failed - executable not found"
          exit 1
        fi
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: transcribe-${{ matrix.os }}
        path: dist/transcribe*

  release:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/transcribe-windows-latest/transcribe.exe
          artifacts/transcribe-ubuntu-latest/transcribe
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        body: |
          # Transcribe v${{ github.ref_name }}
          
          ## Features
          - Audio transcription with real-time processing
          - Support for multiple audio formats
          - User-friendly GUI interface
          - Cross-platform support (Windows and Linux)
          - Advanced noise reduction and audio processing
          - SRT subtitle generation
          
          ## Downloads
          - Windows: transcribe.exe
          - Linux: transcribe (executable)
          
          ## System Requirements
          - Windows 10/11 or Linux (Kali Linux tested)
          - FFmpeg installed (included in the package)
          - 4GB RAM minimum recommended
          - 500MB free disk space
          
          ## Installation
          1. Download the appropriate executable for your system
          2. Make sure you have FFmpeg installed (included in the package)
          3. Run the executable
          
          ## Usage
          1. Click "Select Audio File" to choose your audio file
          2. Click "Transcribe" to start the transcription process
          3. The transcription will be saved in the output folder
          4. SRT subtitles will be generated automatically
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 